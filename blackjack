#!/usr/bin/perl
use warnings;

sub deal_one{
	# my $deal = pop(@_[0]);
	# push(@_[1],$deal);
	(my $deal_from, my $deal_to) = @_;
	$deal_from_size = @$deal_from;

	my $deal = pop(@$deal_from);

	# print ("size of deal_from is: $deal_from_size\n");
	# print ("deal_from_deck is:@$deal_from");
	# if($deal == undef){
	# 	print "\n!!!!!!!!!!!!!!!\n";
	# }
	# print ("the card dealt is:$deal\n");
	push(@$deal_to,$deal);

	return;
}
# print the player hand
sub print_player_deck{
	my @player_deck = @_;
	my $size = @player_deck;
	my $player_hand = "Player's Current Hand:";
	my @possible_values = (0);
	my $possible_size = 0;
	print ("The player_deck size is: $size\n\n");
	# print ("The player_deck is:@player_deck[16]\n");
	if($size == 17 && $player_deck[16] == undef){
		print "oh nooooo\n";
	}
	for(my $i = 0; $i < $size; $i++){
		print ("i is : $i\n");
		$player_hand = $player_hand." ";
		$player_hand = $player_hand.$player_deck[$i];
		$possible_size = @possible_values;
		if($player_deck[$i] eq 'A'){
			for(my $j = 0; $j < $possible_size; $j++){
				my $temp = $possible_values[$j];

				# Checking if new value needs to be created if A is used as 11
				my $if_newvalue = 1;
				for(my $k = 0; $k < $possible_size; $k++){
					if($possible_values[$j] + 11 == $possible_values[$k] || $possible_values[$j] + 11 > 21){
						$if_newvalue = 0;
					}
				}

				#if if_newvalue is 1, we have to push the new value to the possible values array
				if($if_newvalue == 1){
					my $value_topush = $temp + 11;
					push(@possible_values, $value_topush);
				}

				# The default value is 1 for A
				@possible_values[$j] = $temp + 1;
			}
		}
		else{
			for(my $l = 0; $l < $possible_size; $l++){
				$possible_values[$l] = $possible_values[$l] + $face_value_of{$player_deck[$i]};
			}
		}

	}


	my $possible_value_string = "";
	# print ("possible_values before is: @possible_values\n");

	# Filter out the possible values that are over 21
	print ("now the possible_size is:$possible_size\n");
	print ("now the possible_values are: @possible_values\n");
	# my $i = 0;
	# for($i; $i < $possible_size; $i++){
	# 	print "value that is being looked at:$possible_values[$i] at index:$i\n";
	# 	if($possible_values[$i] > 21){
	#
	# 		splice(@possible_values,$i);
	# 		$possible_size = $possible_size - 1;
	# 		$i = $i - 1;

	# 	}
	# }
	$possible_size = @possible_values;
	my $index = 0;
	while($index < $possible_size){
		if($possible_values[$index] > 21){
			splice(@possible_values,$index);

		}
		else{
			$index ++;
		}
		$possible_size = @possible_values;
	}
	# print ("possible_values after is: @possible_values\n");
	my $possible_size_after = @possible_values;
	# Form the string inside of the parentheses
	print ("now the possible_values are after: @possible_values\n");
	print ("now the possible_size is after:$possible_size_after\n");
	# print ("possible_size_after is : $possible_size_after\n");
	for (my $i = 0; $i < $possible_size_after; $i++){
		if($i == 0){
			$possible_value_string = $possible_value_string."$possible_values[$i]";
		}
		else{
			$possible_value_string = $possible_value_string." $possible_values[$i]"
		}
	}

	#print the final string
	print "$player_hand ($possible_value_string)\n";
}
# print the dealer hand
sub print_dealer_deck{
	my @dealer_deck = @_;
	my $size = @dealer_deck;
	my $dealer_hand = "Dealer's Current Hand:";
	my @possible_values = (0);
	my $possible_size = 0;
	for(my $i = 0; $i < $size; $i++){
		if($i == 0){
			$dealer_hand = $dealer_hand." ";
			$dealer_hand = $dealer_hand.$dealer_deck[0];
		}
		else{
			$dealer_hand = $dealer_hand." ?";
		}
		my $possible_size = @possible_values;
		if($dealer_deck[$i] eq 'A'){
			for(my $j = 0; $j < $possible_size; $j++){
				my $temp = $possible_values[$j];

				# Checking if new value needs to be created if A is used as 11
				my $if_newvalue = 1;
				for(my $k = 0; $k < $possible_size; $k++){
					if($possible_values[$j] + 11 == $possible_values[$k]){
						$if_newvalue = 0;
					}
				}

				#if if_newvalue is 1, we have to push the new value to the possible values array
				if($if_newvalue == 1){
					my $value_topush = $temp + 11;
					push(@possible_values, $value_topush);
				}

				# The default value is 1 for A
				@possible_values[$j] = $temp + 1;
			}
		}
		else{

			for(my $l = 0; $l < $possible_size; $l++){
				$possible_values[$l] = $possible_values[$l] + $face_value_of{$dealer_deck[$i]};
			}
		}

	}

	my $possible_value_string = "";
	# Filter out the possible values that are over 21
	$possible_size = @possible_values;
	my $index = 0;
	while($index < $possible_size){
		if($possible_values[$index] > 21){
			splice(@possible_values,$index);

		}
		else{
			$index ++;
		}
		$possible_size = @possible_values;
	}
	my $possible_size_after = @possible_values;
	# Form the string that will be inside of the parentheses
	for (my $i = 0; $i < $possible_size_after; $i++){
		if($i == 0){
			$possible_value_string = $possible_value_string."$possible_values[$i]";
		}
		else{
			$possible_value_string = $possible_value_string." $possible_values[$i]";
		}
	}

	print "$dealer_hand ($possible_value_string)\n";

}
# create a deck
sub create_deck {
	my @deck = ();
	my $index = 0;
	for (my $i=0; $i < 4; $i++) {
  	for(my $j=2; $j <= 10; $j++){
    	$deck[$index] = $j;
    	$index ++;
  	}
    for(my $k=11; $k<=13; $k++){

    	if($k == 11){
      	$deck[$index] = "J";
      }
      elsif($k == 12){
      	$deck[$index] = "Q";
      }
      else{
      	$deck[$index] = "K";
      }
      $index++;
    }

    $deck[$index] = "A";
    $index++;

	}
  return @deck;
}
# shuffle a deck
sub shuffle_deck{
  my @deck = @_;
  my $size = @deck;
  print "the size is: $size\n";
  for (my $i= $size - 1;$i>=0;$i--){
  	my $j = int(rand($i + 1));
  	my $temp = $deck[$i];
		# if(not defined($temp)){
		# 	print ("!!!!!!!!! !!!!!! this is the reason why and i is :$i !!!!!!!!\n");
		# }
  	$deck[$i] = $deck[$j];
  	$deck[$j] = $temp;
	}
  return @deck;
}
my @time = localtime();
my $time_string = localtime();

my $balance =$time[3] * 10 + $time[1];
print "starting balance is $balance\n";

my $line_credit = $time[0];
print "the line of credit is $line_credit\n";
print "The current time is: $time_string\n";


print "Now seed for the game: ";
my $seed = <STDIN>;
chomp $seed;
exit 0 if ($seed eq "");
print "the random seed is $seed\n";

srand($seed);

# create the hash table
%face_value_of = (
    "1"  => 1,
    "2" => 2,
    "3"  => 3,
		"4" => 4,
		"5"  => 5,
    "6" => 6,
    "7"  => 7,
		"8" => 8,
		"9" => 9,
		"10" => 10,
		"J" => 10,
		"Q" => 10,
		"K" => 10,
);

# create the deck
my @deck = create_deck;
# for(my $i = 0; $i <52; $i++ ){
# 	if(not defined($deck[$i])){
# 		print ("!!!!!!!!!!!!hell no at index: $i\n");
# 	}
# }


# shuffle the deck
my @shuffled_deck = ();
my @player_deck = ();
my @dealer_deck = ();
my $round = 0;
my $quit = 0;


while($quit != 1){
	my $hit_or_stay = 0;
	if($round == 0){
		$round = 1;
		@shuffled_deck = shuffle_deck(@deck);
		for(my $i = 0; $i <52; $i++ ){
			if(not defined($shuffled_deck[$i])){
				print ("hell no at index: $i\n");
			}
		}
		print("Hi there, welcome to the game of black jack!! The game where you think you would walk out of here hands full. But I assure you, you won't. Now time to waste both your money and your time.Whoo hoo!!!\n\n");
		print("But first of all, how much would like to lose?: ");
		my $bet_amount = <STDIN>;
		if ($bet_amount <= 0){
			print ("Nice try.");
			last;
		}
		my $bet_amount_rounded = int($bet_amount + 0.5);

		if ($bet_amount_rounded > $balance + $line_credit){
			print ("Sorry bro, you are broke.\n");
			last;
		}
		if ($bet_amount_rounded >= 200){
			print ("Going big huh? Just like they say go big or go home. Oh sorry, I just realize that you won't have a home after playing.\n");
		}
		print ("The rounded bet_amount is: $bet_amount_rounded\n");

		# Pop the two initial deals from the deck




		# Dealering two cards to the player
		# my $dealer_deal = pop(@shuffled_deck);
		# push(@dealer_deck,$dealer_deal);
		# $dealer_deal = pop(@shuffled_deck);
		# push(@dealer_deck,$dealer_deal);
		$deck_size0 = @shuffled_deck;
		print ("Card deck size 0: $deck_size0\n");
		for(my $i = 0; $i < 2; $i++){
			deal_one(\@shuffled_deck,\@dealer_deck);
		}
		$deck_size1 = @shuffled_deck;
		print ("Card deck size 1: $deck_size1\n");
		# Dealing two cards to the player
		# my $player_deal = pop(@shuffled_deck);
		# push(@player_deck,$player_deal);
		# $player_deal = pop(@shuffled_deck);
		# push(@player_deck,$player_deal);
		for(my $i = 0; $i < 2; $i++){
			deal_one(\@shuffled_deck,\@player_deck);
		}
		$deck_size2 = @shuffled_deck;
		print ("Card deck size 2: $deck_size2\n");
		print "right now the player deck is: @player_deck\n";
		print "right now the dealer deck is: @dealer_deck\n";

		# $player_deck_size = @player_deck;
		# for(my $i = 0; $i < $player_deck_size; $i++ ){
		# 	if($player_deck[$i] == undef){
		# 		print ("Hell nooooo at $i");
		# 	}
		# }
		# printing the current hands of both the dealer and the player
		print_dealer_deck(@dealer_deck);
		print_player_deck(@player_deck);



	}
	else{
		print("Hit or Stay?(H/S): ");
		# Removes any trailing string that corresponds to the current value of $/
		# (also known as $INPUT_RECORD_SEPARATOR in the English module).
		chomp(my $input = <STDIN>);
		print "the input is $input\n";
		if($input eq 'H' || $input eq 'h'){
			$hit_or_stay = 0;
			print "been here\n";
		}
		elsif($input eq 'S' || $input eq 's'){
			$hit_or_stay = 1;
		}
		else{
			print "Sorry, I cannot understand what you said.\n";
			next;
		}
		if($hit_or_stay == 0){
			# print "Player_deck before: @player_deck\n";

			$total_deck_size = @shuffled_deck;

			print "right now the player deck is: @player_deck\n";
			print "right now the total deck size is: $total_deck_size\n";
			deal_one(\@shuffled_deck,\@player_deck);


			# print "Player_deck after: @player_deck\n";
			print_dealer_deck(@dealer_deck);
			print_player_deck(@player_deck);
		}
		else{

		}
		print "something\n";


	}







	 #
	 # print("Would you like to continue playing?(Y/N): ");
	 # $if_quit = <STDIN>;
	 # if($if_quit eq 'Y'){
	 #  $quit = 1;
	 # }
	 # elsif($if_quit eq 'N'){
		# $quit = 0;
	 # }

}

#print "the deck after shuffle is: @shuffled_deck";
