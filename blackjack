#!/usr/bin/perl
use warnings;
use List::Util qw( min max );
use Time::Piece;
use Scalar::Util qw(looks_like_number);
use POSIX;
sub dealer_stick{
	(my $if_stick,my $if_ace,my $bet_amount_rounded, my $balance, my $total_balance, my $line_credit, my $round, my $round_done,my $dealer_possible_count,my $dealer_possible_values,my $shuffled_deck ,my $dealer_deck) = @_;

	while($$if_stick == 0){
		$$if_ace = 0;
		@$dealer_possible_values = &print_dealer_deck(-1,$if_ace,@$dealer_deck);
		$$dealer_possible_count = @$dealer_possible_values;
		# If there exists an ace in the dealer's deck, we want to check if there
		# is a possible value that is between 17 and 21
		if($$if_ace == 1){
			for(my $i = 0; $i < $$dealer_possible_count; $i ++){
				if(16 < @$dealer_possible_values[$i] && @$dealer_possible_values[$i]< 22){
					$$if_stick = 1;
					last;
				}
			}

			if($$if_stick == 0){
				print("...Maybe I can draw one more card..\n");
				my $deal = &deal_one($shuffled_deck, $dealer_deck);
				print("...I picked $deal.\n");
				@$dealer_possible_values = &print_dealer_deck(0,$if_ace,@$dealer_deck);
				$$dealer_possible_count = @$dealer_possible_values;
				if($$dealer_possible_count == 0){
					$$if_stick = 1;
					print("I busted, you won.\n");
					$$total_balance = $$total_balance + $$bet_amount_rounded;
					$$balance = $$balance + $$bet_amount_rounded;
					print("Your new balance is $$balance, and your line of credit is $$line_credit.\n\n");
					$$round = 0;
					$$round_done = 1;
				}
			}
			else{
				print "...I'll stick with cards @$dealer_deck.\n";
			}
		}
		else{
			if(@$dealer_possible_values[0] < 17){
				# &print_dealer_deck(0,$if_ace,@$dealer_deck);
				print("...Now, I am gonna draw one card..\n");
				my $deal = &deal_one($shuffled_deck, $dealer_deck);
				print("...I picked $deal.\n");
				@$dealer_possible_values = &print_dealer_deck(0,$if_ace,@$dealer_deck);
				$$dealer_possible_count = @$dealer_possible_values;
				if($$dealer_possible_count == 0){
					$$if_stick = 1;
					print("I busted, you won.\n");
					$$total_balance = $$total_balance + $$bet_amount_rounded;
					$$balance = $$balance + $$bet_amount_rounded;
					print("Your new balance is $$balance, and your line of credit is $$line_credit.\n\n");
					$$round = 0;
					$$round_done = 1;
				}
			}
			else{
				$$if_stick = 1;
				print "...I am going to stick with cards @$dealer_deck.\n";
			}
		}


	}
}
sub check_player_bust{

	(my $player_possible_count, my $total_balance, my $balance, my $line_credit, my $round,my $round_done, my $bet_amount_rounded) = @_;
	if ($$player_possible_count == 0){
		$$total_balance = $$total_balance - $$bet_amount_rounded;
		$$balance = $$balance - $$bet_amount_rounded;
		if($$balance < 0){
			$$line_credit = $$line_credit + $$balance;
			$$balance = 0;
		}
		if($$line_credit < 0 || $$line_credit == 0){
			print "You are broke. Quitting now..\n";
			last;
		}

		print "*Failure sound effect* You are busted.\n";
		print "$$bet_amount_rounded perl bucks lost, your new balance is $$balance, and your line of credit is $$line_credit\n\n";
		# This game is finished, reset the round number to 0
		$$round = 0;
		$$round_done = 1;
	}
}
sub reset_deck{
	my $round = shift;
	my $round_done = shift;
	$$round = 0;
	$$round_done = 1;
	(my $player_deck, my $dealer_deck) = @_;
	@$player_deck = ();
	@$dealer_deck = ();
	return;
}
sub deal_one{
	(my $deal_from, my $deal_to) = @_;
	my $deal_from_size = @$deal_from;
	my $deal = pop(@$deal_from);
	push(@$deal_to,$deal);

	# Check if the deal_from deck has less than 10 cards, if yes we need to create a new deck
	if($deal_from_size < 10){
		print "Less than 10 cards in the deck, I am gonna get us more cards and shuffle the deck.\n";
		print("deck before: @$deal_from \n");
		my @new_deck = &create_deck;
		push(@$deal_from,@new_deck);
		@$deal_from = &shuffle_deck(@$deal_from);
		print "Done.\n";
		print ("deck after: @$deal_from \n");
	}

	return $deal;
}
# print the player hand
sub print_player_deck{
	my @player_deck = @_;
	my $size = @player_deck;
	my $player_hand = "Player's Current Hand:";
	my @possible_values = (0);
	my $possible_size = 0;


	for(my $i = 0; $i < $size; $i++){
		$player_hand = $player_hand." ";
		$player_hand = $player_hand.$player_deck[$i];
		$possible_size = @possible_values;
		if($player_deck[$i] eq 'A'){

			for(my $j = 0; $j < $possible_size; $j++){
				my $temp = $possible_values[$j];

				# Checking if new value needs to be created if A is used as 11
				my $if_newvalue = 1;
				for(my $k = 0; $k < $possible_size; $k++){
					$if_newvalue = 0 if($possible_values[$j] + 11 == $possible_values[$k] || $possible_values[$j] + 11 > 21);
				}

				#if if_newvalue is 1, we have to push the new value to the possible values array
				if($if_newvalue == 1){
					my $value_topush = $temp + 11;
					push(@possible_values, $value_topush);
				}

				# The default value is 1 for A
				$possible_values[$j] = $temp + 1;
			}
		}
		else{
			for(my $l = 0; $l < $possible_size; $l++){
				$possible_values[$l] = $possible_values[$l] + $face_value_of{$player_deck[$i]};
			}
		}

	}


	my $possible_value_string = "";
	# Filter out the possible values that are over 21
	$possible_size = @possible_values;
	my $index = 0;
	while($index < $possible_size){
		if($possible_values[$index] > 21){
			splice(@possible_values,$index);

		}
		else{
			$index ++;
		}
		$possible_size = @possible_values;
	}
	my $possible_size_after = @possible_values;
	for (my $i = 0; $i < $possible_size_after; $i++){
		if($i == 0){
			$possible_value_string = $possible_value_string."$possible_values[$i]";
		}
		else{
			$possible_value_string = $possible_value_string." $possible_values[$i]"
		}
	}

	#print the final string
	print "$player_hand ($possible_value_string)\n";
	return @possible_values;
}
# Print the dealer hand
# Option -1 : only do the calculation and do not print. 1 print the first and
# leave the rest as question marks. 0 print everything.
sub print_dealer_deck{

	my $print_option = shift;
	my $is_ace = shift;


	my @dealer_deck = @_;
	my $size = @dealer_deck;
	my $dealer_hand = "Dealer's Current Hand:";
	my @possible_values = (0);
	my $possible_size = 0;


	for(my $i = 0; $i < $size; $i++){

		if($print_option == 1){
			if($i == 0){
				$dealer_hand = $dealer_hand." ";
				$dealer_hand = $dealer_hand.$dealer_deck[0];
			}
			else{
				$dealer_hand = $dealer_hand." ?";
			}
		}
		else{
			$dealer_hand = $dealer_hand." ";
			$dealer_hand = $dealer_hand.$dealer_deck[$i];
		}



		my $possible_size = @possible_values;
		if($dealer_deck[$i] eq 'A'){
			$$is_ace = 1;
			for(my $j = 0; $j < $possible_size; $j++){
				my $temp = $possible_values[$j];

				# Checking if new value needs to be created if A is used as 11
				my $if_newvalue = 1;
				for(my $k = 0; $k < $possible_size; $k++){
					if($possible_values[$j] + 11 == $possible_values[$k] || $possible_values[$j] + 11 > 21){
						$if_newvalue = 0;
					}
				}

				#if if_newvalue is 1, we have to push the new value to the possible values array
				if($if_newvalue == 1){
					my $value_topush = $temp + 11;
					push(@possible_values, $value_topush);
				}

				# The default value is 1 for A
				$possible_values[$j] = $temp + 1;
			}
		}
		else{

			for(my $l = 0; $l < $possible_size; $l++){
				$possible_values[$l] = $possible_values[$l] + $face_value_of{$dealer_deck[$i]};
			}
		}
	}

	my $possible_value_string = "";
	# Filter out the possible values that are over 21
	$possible_size = @possible_values;
	my $index = 0;
	while($index < $possible_size){
		if($possible_values[$index] > 21){
			splice(@possible_values,$index);

		}
		else{
			$index ++;
		}
		$possible_size = @possible_values;
	}
	my $possible_size_after = @possible_values;
	# Form the string that will be inside of the parentheses
	for (my $i = 0; $i < $possible_size_after; $i++){
		if($i == 0){
			$possible_value_string = $possible_value_string."$possible_values[$i]";
		}
		else{
			$possible_value_string = $possible_value_string." $possible_values[$i]";
		}
	}
	if($print_option == 0){
		print "$dealer_hand ($possible_value_string)\n";
	}
	elsif($print_option == 1){
		print "$dealer_hand\n";
	}

	return @possible_values;
}

# Create a deck
sub create_deck {
	my @deck = ();
	my $index = 0;
	for (my $i=0; $i < 4; $i++) {
  	for(my $j=2; $j <= 10; $j++){
    	$deck[$index] = $j;
    	$index ++;
  	}
    for(my $k=11; $k<=13; $k++){

    	if($k == 11){
      	$deck[$index] = "J";
      }
      elsif($k == 12){
      	$deck[$index] = "Q";
      }
      else{
      	$deck[$index] = "K";
      }
      $index++;
    }

    $deck[$index] = "A";
    $index++;

	}
  return @deck;
}
# Shuffle a deck
sub shuffle_deck{
  my @deck = @_;
  my $size = @deck;
  print "the size is: $size\n";
  for (my $i= $size - 1;$i>=0;$i--){
  	my $j = int(rand($i + 1));
  	my $temp = $deck[$i];

  	$deck[$i] = $deck[$j];
  	$deck[$j] = $temp;
	}
  return @deck;
}

open DATA, "date |"   or die "Couldn't execute program: $!";
$line = <DATA>;
close DATA;
$timezone = strftime("%Z", localtime());
my $parsed_time = Time::Piece->strptime(
      $line,
      "%a %b %d %H:%M:%S $timezone %Y\n");

print "The current time is: $parsed_time\n";
my $balance =$parsed_time->mday() * 10 + $parsed_time->min();
print "Starting balance is $balance\n";

my $line_credit = $parsed_time->sec();
print "Line of credit is $line_credit\n";


my $total_balance = $balance + $line_credit;

print "The total_balance is: $total_balance\n";
print "Now seed for the game: ";

my $seed = <STDIN>;
chomp($seed);
exit 0 if ($seed eq "");
print "the random seed is $seed\n";

srand($seed);

# create the hash table
%face_value_of = (
    "2" => 2,
    "3"  => 3,
		"4" => 4,
		"5"  => 5,
    "6" => 6,
    "7"  => 7,
		"8" => 8,
		"9" => 9,
		"10" => 10,
		"J" => 10,
		"Q" => 10,
		"K" => 10,
		"A" => 11,
);

# create the deck
my @deck = create_deck;
my $round = 0;
my $quit = 0;
my $start = 1;
my $bet_amount;
my $bet_amount_rounded;
my $if_ace = 0;
my $player_possible_count = 0;
my $dealer_possible_count = 0;
my @dealer_possible_values = ();
my @player_possible_values = ();
my @player_deck = ();
my @dealer_deck = ();
my @shuffled_deck = &shuffle_deck(@deck);
my $if_dd = 0;
my $round_done = 0;
while($quit != 1){

	my $hit_or_stay = 0;

	if($round == 0 && $round_done == 0){
		$round = 1;
		my $deck_size = @shuffled_deck;

		if($start == 1){
			$start = 0;
			print("Hi there, my name is Assistant robot Kevin. I am designed to have a lot of personalities not to be nice.By the way, welcome to the game of black jack!! The game where you think you would walk out of here hands full.But I assure you, you won't. Now time to waste both your money and your time.Whoo hoo!!!\n");

			print("But first of all, how much would like to lose?: ");
		}
		else{
			print("Place bet again:");
		}
		chomp($bet_amount = <STDIN>);
		if(!looks_like_number($bet_amount)){
			print ("Sorry I do not understand what you just entered.\n");
			$round = 0;
			$round_done = 0;
			next;
		}
		if ($bet_amount <= 0){
			print ("Nice try.");
			$round = 0;
			$round_done = 0;
			next;
		}
		$bet_amount_rounded = int($bet_amount + 0.5);

		if ($bet_amount_rounded > $total_balance){
			print ("Sorry bro, that is more than what you have.\n");
			$round = 0;
			$round_done = 0;
			next;

		}
		if ($bet_amount_rounded >= 200){
			print ("Going big huh? Just like they say go big or go home. Oh sorry, I just realize that you won't have a home after playing.\n");
		}


		# Dealing two cards to the player
		my $dealer_deal_one = &deal_one(\@shuffled_deck,\@dealer_deck);
		my $dealer_deal_two = &deal_one(\@shuffled_deck,\@dealer_deck);


		# Dealing two cards to the player
		my $player_deal_one	= &deal_one(\@shuffled_deck,\@player_deck);
		my $player_deal_two	= &deal_one(\@shuffled_deck,\@player_deck);

		# Checking if the user should be given the double down
		my $dealer_initial = $face_value_of{$dealer_deal_one} + $face_value_of{$dealer_deal_two};
		my $player_initial = $face_value_of{$player_deal_one} + $face_value_of{$player_deal_two};

		my $if_blackjack = 0;
		if($dealer_initial == 21){
			&print_dealer_deck(0,\$if_ace,@dealer_deck);
			&print_player_deck(@player_deck);
			print "I got a black jack!\n";
			if($player_initial == 21){
				print "You got lucky. I guess it's a tie.\n";
				print("Your balance is still: $balance. And your line of credit is: $line_credit\n\n");
				# This game is finished, reset the round number to 0
				&reset_deck(\$round,\$round_done,\@player_deck,\@dealer_deck);
			}
			else{
				print "and...you don't.\n";
				$total_balance = $total_balance - $bet_amount_rounded;
				$balance = $balance - $bet_amount_rounded;
				if($balance < 0){
					$line_credit = $line_credit + $balance;
					$balance = 0;
				}
				if($line_credit < 0 || $line_credit == 0){
					print "You are broke. Quitting now..\n";
					last;
				}

				print "$bet_amount_rounded perl bucks lost. You balance is $balance, and your line of credit is $line_credit\n\n";
				$if_blackjack = 1;
				# This game is finished, reset the round number to 0
				&reset_deck(\$round,\$round_done,\@player_deck,\@dealer_deck);

			}
		}
		elsif($player_initial == 21){

			print "OK...Congratz, You got a blackjack. Very lucky.\n";
			$if_blackjack = 1;
			$total_balance = int($total_balance + 1.5 * $bet_amount_rounded);
			$balance = int($balance + 1.5 * $bet_amount_rounded);
			print("Your new balance is $balance, and your line of credit is $line_credit .\n");
			# This game is finished, reset the round number to 0
			&reset_deck(\$round,\$round_done,\@player_deck,\@dealer_deck);

		}
		# Printing the current hands of both the dealer and the player
		if($if_blackjack == 0){
			@dealer_possible_values = &print_dealer_deck(1,\$if_ace,@dealer_deck);
			@player_possible_values = &print_player_deck(@player_deck);
		}
		else{
			$if_blackjack = 0;
		}

	}
	elsif($round_done == 0){
		my $input;
		if(($player_possible_values[0] == 9 ||$player_possible_values[0] == 10
		|| $player_possible_values[0] == 11) && $round == 1){
			print("Hit or Stay or Double down?(H/S/D): ");
			chomp($input = <STDIN>);
			if($input eq 'H' || $input eq 'h'){
				$hit_or_stay = 0;

			}
			elsif($input eq 'S' || $input eq 's'){
				$hit_or_stay = 1;
			}
			elsif($input eq 'D' || $input eq 'd'){
				$hit_or_stay = 2;
				$if_dd = 1;
			}
			else{
				print "Sorry, I cannot understand what you said.\n";
				next;
			}
		}
		else{
			print("Hit or Stay?(H/S): ");
			# Removes any trailing string that corresponds to the current value of $/
			# (also known as $INPUT_RECORD_SEPARATOR in the English module).
			chomp($input = <STDIN>);

			if($input eq 'H' || $input eq 'h'){
				$hit_or_stay = 0;

			}
			elsif($input eq 'S' || $input eq 's'){
				$hit_or_stay = 1;
			}
			else{
				print "Sorry, I cannot understand what you said.\n";
				next;
			}
		}
		$round ++;
		if($hit_or_stay == 0){
			&print_dealer_deck(1,\$if_ace,@dealer_deck);
			&deal_one(\@shuffled_deck,\@player_deck);
			@player_possible_values = &print_player_deck(@player_deck);
			$player_possible_count = @player_possible_values;

			# If there is no possible value under 21, player immediately loses
			check_player_bust(\$player_possible_count,\$total_balance,\$balance,\$line_credit,\$round,\$round_done,\$bet_amount_rounded);

		}

		# If the player decides to stay
		elsif($hit_or_stay == 1){
			my $if_stick = 0;
			print ("I am starting with: @dealer_deck.\n");
			&dealer_stick(\$if_stick,\$if_ace,\$bet_amount_rounded,\$balance,\$total_balance,\$line_credit,\$round,\$round_done,\$dealer_possible_count,\@dealer_possible_values,\@shuffled_deck,\@dealer_deck);
		}
		else{
			print ("We are doing double down.\n");

			# Deal one card to the player first because it is a double down
			&deal_one(\@shuffled_deck,\@player_deck);
			@player_possible_values = &print_player_deck(@player_deck);
			$player_possible_count = @player_possible_values;
			$bet_amount_rounded = $bet_amount_rounded * 2;
			# If there is no possible value under 21, player immediately loses
			check_player_bust(\$player_possible_count,\$total_balance,\$balance,\$line_credit,\$round,\$round_done,\$bet_amount_rounded);
			my $if_stick = 0;
			print ("I am starting with: @dealer_deck.\n");
			&dealer_stick(\$if_stick,\$if_ace,\$bet_amount_rounded,\$balance,\$total_balance,\$line_credit,\$round,\$round_done,\$dealer_possible_count,\@dealer_possible_values,\@shuffled_deck,\@dealer_deck);

		}




		if($round_done == 0 && ($hit_or_stay == 1 || $hit_or_stay == 2)){
			my $player_max_possible = max @player_possible_values;
			my $dealer_max_possible = max @dealer_possible_values;

			if($player_max_possible > $dealer_max_possible || $player_max_possible == $dealer_max_possible){
				print("You won.\n");

				$total_balance = $total_balance + $bet_amount_rounded;
				$balance = $balance + $bet_amount_rounded;
				print("Your new balance is $balance, and your line of credit is $line_credit.\n");


				&reset_deck(\$round,\$round_done,\@player_deck,\@dealer_deck);

			}
			else{
				if($if_dd == 1){
					$if_dd = 0;
					$bet_amount_rounded = $bet_amount_rounded * 2;
				}

				$total_balance = $total_balance - $bet_amount_rounded;
				$balance = $balance - $bet_amount_rounded;
				if($balance < 0){
					$line_credit = $line_credit + $balance;
					$balance = 0;
				}


				print "You lost.\n";
				print "$bet_amount_rounded perl bucks lost, now you have balance $balance, and line of credit $line_credit .\n";
				if($line_credit < 0 || $line_credit == 0){
					print "You are broke. Quitting now..\n";
					last;
				}

				&reset_deck(\$round,\$round_done,\@player_deck,\@dealer_deck);
			}
		}

	}
	if($round_done == 1){
		print("Would you like to continue playing?(Y/N): ");
		chomp(my $if_quit = <STDIN>);

		if($if_quit eq 'Y' || $if_quit eq 'y'){
			@player_deck = ();
			@dealer_deck = ();
			$round_done = 0;
			$quit = 0;
		}
		elsif($if_quit eq 'N' || $if_quit eq 'n'){
			$quit = 1;
		}
		else{
			print "I do not understand what you just said. Try again. \n";
			$round_done = 1;
		}
	}









}

#print "the deck after shuffle is: @shuffled_deck";
