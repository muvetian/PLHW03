#!/usr/bin/perl
use warnings;

sub deal_one{
	(my $deal_from, my $deal_to) = @_;
	$deal_from_size = @$deal_from;
	my $deal = pop(@$deal_from);
	push(@$deal_to,$deal);

	# Check if the deal_from deck has less than 10 cards, if yes we need to create a new deck


	return;
}
# print the player hand
sub print_player_deck{
	my @player_deck = @_;
	my $size = @player_deck;
	my $player_hand = "Player's Current Hand:";
	my @possible_values = (0);
	my $possible_size = 0;
	print ("The player_deck size is: $size\n\n");
	# print ("The player_deck is:@player_deck[16]\n");
	if($size == 17 && $player_deck[16] == undef){
		print "oh nooooo\n";
	}
	for(my $i = 0; $i < $size; $i++){
		print ("i is : $i\n");
		$player_hand = $player_hand." ";
		$player_hand = $player_hand.$player_deck[$i];
		$possible_size = @possible_values;
		if($player_deck[$i] eq 'A'){
			$if_ace = 1;
			for(my $j = 0; $j < $possible_size; $j++){
				my $temp = $possible_values[$j];

				# Checking if new value needs to be created if A is used as 11
				my $if_newvalue = 1;
				for(my $k = 0; $k < $possible_size; $k++){
					if($possible_values[$j] + 11 == $possible_values[$k] || $possible_values[$j] + 11 > 21){
						$if_newvalue = 0;
					}
				}

				#if if_newvalue is 1, we have to push the new value to the possible values array
				if($if_newvalue == 1){
					my $value_topush = $temp + 11;
					push(@possible_values, $value_topush);
				}

				# The default value is 1 for A
				@possible_values[$j] = $temp + 1;
			}
		}
		else{
			for(my $l = 0; $l < $possible_size; $l++){
				$possible_values[$l] = $possible_values[$l] + $face_value_of{$player_deck[$i]};
			}
		}

	}


	my $possible_value_string = "";
	# print ("possible_values before is: @possible_values\n");

	# Filter out the possible values that are over 21
	print ("now the possible_size is:$possible_size\n");
	print ("now the possible_values are: @possible_values\n");
	$possible_size = @possible_values;
	my $index = 0;
	while($index < $possible_size){
		if($possible_values[$index] > 21){
			splice(@possible_values,$index);

		}
		else{
			$index ++;
		}
		$possible_size = @possible_values;
	}
	my $possible_size_after = @possible_values;
	# Form the string inside of the parentheses
	print ("now the possible_values are after: @possible_values\n");
	print ("now the possible_size is after:$possible_size_after\n");
	# print ("possible_size_after is : $possible_size_after\n");
	for (my $i = 0; $i < $possible_size_after; $i++){
		if($i == 0){
			$possible_value_string = $possible_value_string."$possible_values[$i]";
		}
		else{
			$possible_value_string = $possible_value_string." $possible_values[$i]"
		}
	}

	#print the final string
	print "$player_hand ($possible_value_string)\n";
	return @possible_values;
}
# Print the dealer hand
sub print_dealer_deck{

	$print_option = shift;
	print ("!!!! print option is : $print_option\n");
	my $is_ace = shift;
	print ("!!!!!!! if_ace is : $$is_ace\n");
	$$is_ace = 1;
	my $print_option = shift;
	my @dealer_deck = @_;
	my $size = @dealer_deck;
	my $dealer_hand = "Dealer's Current Hand:";
	my @possible_values = (0);
	my $possible_size = 0;
	for(my $i = 0; $i < $size; $i++){
		if($i == 0){
			$dealer_hand = $dealer_hand." ";
			$dealer_hand = $dealer_hand.$dealer_deck[0];
		}
		else{
			$dealer_hand = $dealer_hand." ?";
		}
		my $possible_size = @possible_values;
		if($dealer_deck[$i] eq 'A'){
			for(my $j = 0; $j < $possible_size; $j++){
				my $temp = $possible_values[$j];

				# Checking if new value needs to be created if A is used as 11
				my $if_newvalue = 1;
				for(my $k = 0; $k < $possible_size; $k++){
					if($possible_values[$j] + 11 == $possible_values[$k] || $possible_values[$j] + 11 > 21){
						$if_newvalue = 0;
					}
				}

				#if if_newvalue is 1, we have to push the new value to the possible values array
				if($if_newvalue == 1){
					my $value_topush = $temp + 11;
					push(@possible_values, $value_topush);
				}

				# The default value is 1 for A
				@possible_values[$j] = $temp + 1;
			}
		}
		else{

			for(my $l = 0; $l < $possible_size; $l++){
				$possible_values[$l] = $possible_values[$l] + $face_value_of{$dealer_deck[$i]};
			}
		}

	}

	my $possible_value_string = "";
	# Filter out the possible values that are over 21
	$possible_size = @possible_values;
	my $index = 0;
	while($index < $possible_size){
		if($possible_values[$index] > 21){
			splice(@possible_values,$index);

		}
		else{
			$index ++;
		}
		$possible_size = @possible_values;
	}
	my $possible_size_after = @possible_values;
	# Form the string that will be inside of the parentheses
	for (my $i = 0; $i < $possible_size_after; $i++){
		if($i == 0){
			$possible_value_string = $possible_value_string."$possible_values[$i]";
		}
		else{
			$possible_value_string = $possible_value_string." $possible_values[$i]";
		}
	}

	print "$dealer_hand ($possible_value_string)\n";
	return @possible_values;
}
# Create a deck
sub create_deck {
	my @deck = ();
	my $index = 0;
	for (my $i=0; $i < 4; $i++) {
  	for(my $j=2; $j <= 10; $j++){
    	$deck[$index] = $j;
    	$index ++;
  	}
    for(my $k=11; $k<=13; $k++){

    	if($k == 11){
      	$deck[$index] = "J";
      }
      elsif($k == 12){
      	$deck[$index] = "Q";
      }
      else{
      	$deck[$index] = "K";
      }
      $index++;
    }

    $deck[$index] = "A";
    $index++;

	}
  return @deck;
}
# Shuffle a deck
sub shuffle_deck{
  my @deck = @_;
  my $size = @deck;
  print "the size is: $size\n";
  for (my $i= $size - 1;$i>=0;$i--){
  	my $j = int(rand($i + 1));
  	my $temp = $deck[$i];

  	$deck[$i] = $deck[$j];
  	$deck[$j] = $temp;
	}
  return @deck;
}
my @time = localtime();
my $time_string = localtime();

my $balance =$time[3] * 10 + $time[1];
print "starting balance is $balance\n";

my $line_credit = $time[0];
print "the line of credit is $line_credit\n";
print "The current time is: $time_string\n";

my $total_balance = $balance + $line_credit;
print "The total_balance is: $total_balance\n";
print "Now seed for the game: ";
my $seed = <STDIN>;
chomp($seed);
exit 0 if ($seed eq "");
print "the random seed is $seed\n";

srand($seed);

# create the hash table
%face_value_of = (
    "1"  => 1,
    "2" => 2,
    "3"  => 3,
		"4" => 4,
		"5"  => 5,
    "6" => 6,
    "7"  => 7,
		"8" => 8,
		"9" => 9,
		"10" => 10,
		"J" => 10,
		"Q" => 10,
		"K" => 10,
);

# create the deck
my @deck = create_deck;
# for(my $i = 0; $i <52; $i++ ){
# 	if(not defined($deck[$i])){
# 		print ("!!!!!!!!!!!!hell no at index: $i\n");
# 	}
# }


# shuffle the deck
my @shuffled_deck = ();
my @player_deck = ();
my @dealer_deck = ();
my $round = 0;
my $quit = 0;
my $start = 1;
my $bet_amount;
my $bet_amount_rounded;
my $if_ace = 0;
while($quit != 1){
	my $round_done = 0;
	my $hit_or_stay = 0;
	if($round == 0){
		$round = 1;
		@shuffled_deck = shuffle_deck(@deck);
		for(my $i = 0; $i <52; $i++ ){
			if(not defined($shuffled_deck[$i])){
				print ("hell no at index: $i\n");
			}
		}
		# If this is the first time the player opens the game, show the welcoming message
		if($start == 1){
			$start = 0;
			print("Hi there, my name is Assistant robot Kevin. I am designed to have a lot of personalities not to be nice. By the way, welcome to the game of black jack!! The game where you think you would walk out of here hands full. But I assure you, you won't. Now time to waste both your money and your time.Whoo hoo!!!\n\n");
			print("But first of all, how much would like to lose?: ");
		}
		else{
			print("Place bet again:");
		}

		$bet_amount = <STDIN>;
		if ($bet_amount <= 0){
			print ("Nice try.");
			last;
		}
		$bet_amount_rounded = int($bet_amount + 0.5);

		if ($bet_amount_rounded > $total_balance){
			print ("Sorry bro, you are broke.\n");
			last;
		}
		if ($bet_amount_rounded >= 200){
			print ("Going big huh? Just like they say go big or go home. Oh sorry, I just realize that you won't have a home after playing.\n");
		}
		print ("The rounded bet_amount is: $bet_amount_rounded\n");


		# Dealing two cards to the player
		$deck_size0 = @shuffled_deck;
		for(my $i = 0; $i < 2; $i++){
			deal_one(\@shuffled_deck,\@dealer_deck);
		}
		$deck_size1 = @shuffled_deck;

		# Dealing two cards to the player
		for(my $i = 0; $i < 2; $i++){
			deal_one(\@shuffled_deck,\@player_deck);
		}


		print "right now the player deck is: @player_deck\n";
		print "right now the dealer deck is: @dealer_deck\n";


		# Printing the current hands of both the dealer and the player
		&print_dealer_deck(3,\$if_ace,@dealer_deck);
		&print_player_deck(@player_deck);




	}
	else{
		print("Hit or Stay?(H/S): ");
		# Removes any trailing string that corresponds to the current value of $/
		# (also known as $INPUT_RECORD_SEPARATOR in the English module).
		chomp(my $input = <STDIN>);
		print "the input is $input\n";
		if($input eq 'H' || $input eq 'h'){
			$hit_or_stay = 0;
			print "been here\n";
		}
		elsif($input eq 'S' || $input eq 's'){
			$hit_or_stay = 1;
		}
		else{
			print "Sorry, I cannot understand what you said.\n";
			next;
		}
		if($hit_or_stay == 0){
			$total_deck_size = @shuffled_deck;
			print "right now the player deck is: @player_deck\n";
			print "right now the total deck size is: $total_deck_size\n";
			deal_one(\@shuffled_deck,\@player_deck);
			my $player_possible_count = &print_player_deck(@player_deck);
			# my $dealer_possible_count = print_dealer_deck(3,\$if_ace,@dealer_deck);
			$input_option = 3;
			my $dealer_possible_count = &print_dealer_deck($input_option,\$if_ace,@dealer_deck);

			# If there is no possible value under 21, player immediately loses
			if ($player_possible_count == 0){
				$total_balance = $total_balance - $bet_amount_rounded;
				print "*Failure sound effect* You are busted. $bet_amount_rounded
				perl bucks lost, $total_balance to go....\n";
				# This game is finished, reset the round number to 0
				$round = 0;
				$round_done = 1;
			}

		}

		# If the player decides to stay
		else{
			$if_ace = 0;
			print ("before if_ace: $if_ace\n");
			my @dealer_possible_values = &print_dealer_deck(1,\$if_ace,@dealer_deck);
			print ("after if_ace: $if_ace\n");	
			my $dealer_possible_count = @dealer_possible_values;
			# If there exists an ace in the dealer's deck, we want to check if there
			# is a possible value that is between 17 and 21
			if($if_ace = 1){

					my $if_stick = 0;
					for(my $i = 0; $i < $dealer_possible_count; $i ++){
						if(16 < $dealer_possible_values[$i] && $dealer_possible[$i]< 22){
							$if_stick = 1;
						}
					}

			}
			else{
				if($dealer_possible_values[0] <= 16){
					print("I am gonna draw one card..\n");
					deal_one(\@shuffled_deck, \@player_deck);
				}
			}

		}



		print "round done is : $round_done\n";
		if($round_done == 1){
			print("Would you like to continue playing?(Y/N): ");
			chomp(my $if_quit = <STDIN>);

	 	 	if($if_quit eq 'Y' || $if_quit eq 'y'){
	 	  	$quit = 0;
	 	 	}
	 	 	else{
				$quit = 1;
			}

		}



	}










}

#print "the deck after shuffle is: @shuffled_deck";
